continue
response.status
continue
response.status
continue
response.body
continue
(start_time > exam.exam_window.start_time) && (start_time < exam.exam_window.end_time)
continue
response.body
continue
exam.exam_window.start_time
start_time
continue
response.body
continue
(start_time > exam.exam_window.start_time) && (start_time < exam.exam_window.end_time)
continue
response.body
continue
exam.exam_window.start_time
start_time
continue
(start_time > exam.exam_window.start_time) && (start_time < exam.exam_window.end_time)
continue
exam.exam_window.start_time + 5.hours
exam.exam_window.start_time + 5.houes
exam.exam_window.start_time
start_time
continue
exam.exam_window.start_time + 5.hours
exam.exam_window.start_time - 5.hours
start_time
exam.exam_window.start_time
start_time
continue
response.status
response.body
continue
college.exams.find(1)
college.exams
college
JSON.parse(response.body)
responseJSON.parse(response.body)
exam_window
college
exam
continue
exam
continue
exam
continue
exam
continue
college
exam
continue
college
continue
college
continue
JSON.parse(response.body)["message"]
JSON.parse(response.body)
response.body
response
continue
exam.exam_window.start_time
start_time
continue
exit
user
continue
errors
continue
errors.empty?
user, exam, errors = UserExamService.validate_user_exam_data(user_exam_params)
errors.empty?
UserExamService.validate_user_exam_data(user_exam_params)
continue
next
user_exam_params
continue
(start_time > exam.exam_window.start_time) && (start_time < exam.exam_window.end_time)
continue
exam.exam_window
Time.now
Time.new(start_time)
(start_time > exam.exam_window.start_time) && (start_time < exam.exam_window.end_time)
exam.exam_window.end_time
exam.exam_window.start_time
start_time
continue
next
college
exam
next
quit
college
next
CollegeService.college(params).present?
continue
 CollegeService.college(params).present?
next
continue
UserService.create_user(user_exam_params)
user
continueuser
continue
User.find_by(phone_number: user_exam_params[:phone_number])
User.find_by(user_exam_params[:phone_number])
user_exam_params[:phone_number]
User.find_by(user_exam_params[:phone_number])
continue
user_exam_params
user
continue
quit
[].empty?
continue
is_start_time_in_exam_window(exam, start_time)
exit
is_start_time_in_exam_window(exam, start_time)
is_start_time_in_exam_window(college, exam, start_time)
next
continue
 UserExamService.validate_user_exam_data(@college, @exam, user_exam_params[:start_time])
 user = @user.present? ? @user : UserService.create_user(user_exam_params)
quit
@college.exams.find(user_exam_params[:exam_id])
@exam
@college.exams
@college
quit
(user_exam_params[:start_time] > @college.exams.find(@exam.id).exam_window.start_time) && (user_exam_params[:start_time] > @college.exams.find(@exam.id).exam_window.end_time)
user_exam_params[:start_time] > @college.exams.find(@exam.id).exam_window.start_time
user_exam_params[:start_time] < @college.exams.find(@exam.id).exam_window.start_time
user_exam_params[:start_time] > @college.exams.find(@exam.id).exam_window.start_time
user_exam_params[:start_time]
user_exam_params
e
e.start_time > @college.exams.find(@exam.id).exam_window.start_time
e
e = @college.exams.find(@exam.id)
e
e.start_time > @college.exams.find(@exam.id).exam_window.start_time
e = @college.exams.find(@exam.id).exam_window.start_time
e = @college.exams.find(@exam.id).exam_window.start_date
e = @college.exams.find(@exam.id).exam_window
e = @college.exams.find(@exam.id)
@college.exams.find(@exam.id).exam_window
@college.exams.find(@exam.id)
@college.exams
@college
quit
a.valid?
a = UserExam.new ({}.merge(user_id: @user.id, exam_id: @exam.id))
UserExam.new ({}.merge(user_id: @user.id, exam_id: @exam.id))
UserExam.new ({}.merge(user_id: @user.id, exam_id: @exam.id)).valid?
UserExam.new ({}.merge(user_id: @user.id, exam_id: @exam.id))
UserExam.new {}.merge(user_id: @user.id, exam_id: @exam.id)
{}.merge(user_id: @user.id, exam_id: @exam.id)
{}.merge(user_id: user.id, exam_id: @exam.id)
user_exam_params
user_exam_params.slice(:college_id)
user_exam_params
@user_exam = UserExam.new(user_exam_params)
@exam
@college
@user
quit
params[:phone_number]
params["phone_number"]
params
@college
@user
quit
User.create(first_name: "Bhagwan", last_name: "Suwarnkar", college_id: 1, phone_number: "7899437413")
User.create(first_name: "Bhagwan", last_name: "Suwarnkar", college_id: c.id, phone_number: "7899437413")
user_params
@user
continue
user_params
reload!
user_params
params
@user
continue
UserExam.new(user_exam_params)
user_exam_params
